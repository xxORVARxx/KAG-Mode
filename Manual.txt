


// Base/Rules/CommonScripts/ PlayerInfo.as
PlayerInfo::PlayerInfo()
PlayerInfo::PlayerInfo(string,u8,string)
void PlayerInfo::Setup(string,u8,string)
void PlayerInfo::setTeam(u8)
bool PlayerInfo::opEquals(PlayerInfo&in)
int PlayerInfo::opCmp(PlayerInfo&in)



// Base/Rules/CommonScripts/ BaseTeamInfo.as
BaseTeamInfo::BaseTeamInfo()
BaseTeamInfo::BaseTeamInfo(u8, string)
void BaseTeamInfo::Reset()
s32 getTeamSize(BaseTeamInfo@[]@, int)
s32 getSmallestTeam(BaseTeamInfo@[]@)
int getLargestTeam(BaseTeamInfo@[]@)
int getTeamDifference(BaseTeamInfo@[]@)



// Base/Rules/CommonScripts/ RulesCore.as                   // xxCore_rules.as
RulesCore::RulesCore()                                      RULES::c_Core::c_Core()
RulesCore::RulesCore(CRules@,RespawnSystem@)                RULES::c_Core::c_Core(CRules@,RESPAWN::c_System@)
RulesCore::RulesCore(bool)                                  RULES::c_Core::c_Core(bool)
void RulesCore::Setup(CRules@,RespawnSystem@)               void RULES::c_Core::Setup(CRules@,RESPAWN::c_System@)
void RulesCore::Update()                                    void RULES::c_Core::Update()
void RulesCore::SetupTeams()                                void RULES::c_Core::Setup_teams()
void RulesCore::AddTeam(CTeam@)                             void RULES::c_Core::Change_team_player_count(int)
BaseTeamInfo@ RulesCore::getTeam(int)
void RulesCore::ChangeTeamPlayerCount(int,int)
void RulesCore::SetupPlayers()                              void RULES::c_Core::Setup_players()
PlayerInfo@ RulesCore::getInfoFromName(string)              PLAYER::c_Player@ RULES::c_Core::Get_player(string)
PlayerInfo@ RulesCore::getInfoFromPlayer(CPlayer@)          PLAYER::c_Player@ RULES::c_Core::Get_player(CPlayer@)
void RulesCore::AddPlayer(CPlayer@,u8,string)               void RULES::c_Core::Add_player(CPlayer@,u8,string)
void RulesCore::RemovePlayer(CPlayer@)                      void RULES::c_Core::Remove_player(CPlayer@)
void RulesCore::ChangePlayerTeam(CPlayer@,int)              
void RulesCore::AddPlayerSpawn(CPlayer@)                    void RULES::c_Core::Add_player_spawn(CPlayer@)
void RulesCore::onPlayerDie(CPlayer@,CPlayer@,u8)           void RULES::c_Core::on_Player_die(CPlayer@,CPlayer@,u8)
void RulesCore::onSetPlayer(CBlob@,CPlayer@)                void RULES::c_Core::on_Set_player(CBlob@,CPlayer@)
string RulesCore::filterBlobNameToSpawn(string,CPlayer@)    string RULES::c_Core::Filter_blob_name_to_spawn(string,CPlayer@)
void RulesCore::AddAllPlayersToSpawn()                      void RULES::c_Core::Add_all_players_to_spawn()
void RulesCore::RemovePlayerBlob(CPlayer@)                  void RULES::c_Core::Remove_player_blob(CPlayer@)



// Base/Rules/CommonScripts/ RespawnSystem.as                   // xxCore_respawn.as
RespawnSystem::RespawnSystem()                                  RULES::c_System::Respawn_system()
void RespawnSystem::Update()                                    void RULES::c_System::Update()
void RespawnSystem::AddPlayerToSpawn(CPlayer@)                  void RULES::c_System::Add_player_to_spawn(CPlayer@)
void RespawnSystem::RemovePlayerFromSpawn(CPlayer@)             void RULES::c_System::Remove_player_from_spawn(CPlayer@)
void RespawnSystem::SetCore(RulesCore@)                         void RULES::c_System::Set_rules(RULES::c_Core@)
CBlob@ RespawnSystem::SpawnPlayerIntoWorld(Vec2f,PlayerInfo@)   CBlob@ RULES::c_System::Spawn_player_into_world(Vec2f,PLAYER::c_Player@)
void RespawnSystem::DoSpawnPlayer(PlayerInfo@)                  void RULES::c_System::Do_spawn_player(PLAYER::c_Player@)
bool RespawnSystem::canSpawnPlayer(PlayerInfo@)                 bool RULES::c_System::Can_spawn_player(PLAYER::c_Player@)
Vec2f RespawnSystem::getSpawnLocation(PlayerInfo@)              Vec2f RULES::c_System::Get_spawn_location(PLAYER::c_Player@)
bool RespawnSystem::isSpawning(CPlayer@)                        bool RULES::c_System::Is_spawning(CPlayer@)
